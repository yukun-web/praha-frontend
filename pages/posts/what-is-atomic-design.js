import Link from 'next/link';

export default function FirstPost() {
  return (
    <>
      <h1>課題１</h1>
      <h2>アトミックデザインとは</h2>
      <p>
        アトミックデザインは Brad Frost により提唱されたウェブデザインの手法です。<br/>
        これは原子、分子、細胞、生物といった自然界のもののように、デザインを小さな部品に分割し、それらを組み合わせてデザインシステムを構築するという考え方です。
      </p>
      <h2>アトミックデザインにおける用語</h2>
      <h3>Atoms</h3>
      <p>
        Atoms (= 原子) は、ボタンやラベル、入力欄などの、それ以上分割できない最小単位のデザインパーツです。<br/>
        これらのパーツは、他のパーツに依存しません。
      </p>
      <h3>Molecules</h3>
      <p>
        Molecules (= 分子) は、複数の Atoms を組み合わせたものです。<br/>
        例えば、ラベルと入力欄を組み合わせた入力項目などです。
      </p>
      <h3>Organisms</h3>
      <p>
        Organisms (= 細胞) は、Molecules や Atoms を組み合わせたものです。<br/>
        Molecular とは異なり、Organisms はそれ自体で機能します。<br/>
        例えば、ナビゲーションバーなどです。
      </p>
      <h3>Templates</h3>
      <p>
        Templates (= テンプレート) は、Organisms や Molecules、Atoms を組み合わせたものです。<br/>
        これらは、ページの構造を定義します。
      </p>
      <h3>Pages</h3>
      <p>
        Pages (= ページ) は、Templates
        に実際のコンテンツを流し込んだものです。<br/>
        Next.js の pages は、この Pages と対応します。
      </p>
      <h2>関数コンポーネントとクラスコンポーネントの違い</h2>
      <p>
        関数コンポーネントは、React 16.8 で追加された機能です。<br/>
        これは、クラスコンポーネントよりもシンプルにコンポーネントを記述できるようになりました。
      </p>
      <p>
        また、関数コンポーネントでは Hooks という機能を使うことで、ロジックをコンポーネントから切り離すことができます。<br/>
        これにより、コンポーネントの再利用性を高めることができます。
      </p>
      <h1>課題２</h1>
      <h2>position: absolute; を使ってはいけない理由</h2>
      <ol>
        <li>position: static
          になっていない親要素を基準にするため、コンポーネントの外側に影響されたり、自らが小要素として持っている要素に影響を与えてしまう可能性があるため。
        </li>
        <li>flex, grid
          などのモダンなテクニックで対応できる内容である場合に、レスポンシブ対応などが難しくなるため
        </li>
        <li>表示と HTML
          から読み取れる構成が乖離してしまうのでアクセシビリティが低下する
        </li>
      </ol>
    </>
  );
}